buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    classpath "com.android.tools.build:gradle:8.5.2"
    classpath "com.badlogicgames.gdx:gdx-tools:1.12.0"
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects - project(':android')) {
  apply plugin: 'java-library'
  sourceCompatibility = 8

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

subprojects {
  version = "$projectVersion"
  ext.appName = 'Crystal Defense'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://teavm.org/maven/repository/' }
  }
}

eclipse.project.name = 'Crystal Defense' + '-parent'

task convertSvgToPng {
    doLast {
        def svgFiles = fileTree('assets').matching {
            include '**/*.svg'
        }
        
        svgFiles.each { File svg ->
            def pngPath = svg.absolutePath.replace('.svg', '.png')
            def inkscapeCmd = ["inkscape",
                             "--export-type=png",
                             "--export-filename=${pngPath}",
                             svg.absolutePath]
            
            println "Converting: ${svg.name} to PNG"
            def process = inkscapeCmd.execute()
            process.waitFor()
            
            if (process.exitValue() == 0) {
                println "Successfully converted ${svg.name}"
            } else {
                println "Error converting ${svg.name}"
                println "Error: ${process.err.text}"
            }
        }
    }
}

// 添加纹理打包任务
task packTextures {
    dependsOn convertSvgToPng
    doLast {
        file("assets/packed").mkdirs()
        
        def texturePacker = Class.forName("com.badlogic.gdx.tools.texturepacker.TexturePacker")
        def settings = Class.forName("com.badlogic.gdx.tools.texturepacker.TexturePacker\$Settings").newInstance()
        
        settings.maxWidth = 1024
        settings.maxHeight = 1024
        settings.pot = true
        settings.square = false
        
        ["towers", "enemies", "ui", "tiles", "effects"].each { dir ->
            println "Packing textures from: $dir"
            texturePacker.process(
                settings,
                "assets/$dir",
                "assets/packed",
                "${dir}.atlas"
            )
        }
    }
}

